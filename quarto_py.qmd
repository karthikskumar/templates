---
title: "This is a template"
format: 
    revealjs:
        embed-resources: true
        self-contained-math: true
---


## Getting Started
<!-- 
General Reference: https://quarto.org/docs/presentations/revealjs/
Working with Jupyter: https://quarto.org/docs/reference/cells/cells-jupyter.html
-->

- Turn off alarm
- Get out of bed
- Start a cup of Quarto

## Going to sleep

- Get in bed
- Count sheep

## Slide with a pause

content before the pause

. . .

content after the pause

## Slide with a column
:::: {.columns}

::: {.column width="40%"}
Left column
:::

::: {.column width="60%"}
Right column
:::

::::

## Slide Title {.smaller}

- A smaller bullet

## Slide with Asides and Footnotes

- Green ^[A footnote]
- Brown
- Purple

::: aside
Some additional commentary of more peripheral interest.
:::


## Slide with a custom footer

Slide content

::: footer
Custom footer text
:::

## Slide with a plotly express plot {.smaller}
```{python}
#| echo: false
#| fig-cap: "A line plot on a polar axis"
import plotly.express as px
import utils as u
u.init_env(itables=False)

df = px.data.iris()
# Use directly Columns as argument. You can use tab completion for this!
fig = px.scatter(df, x=df.sepal_length, y=df.sepal_width, color=df.species, size=df.petal_length)
fig.show()
```


## Slide with an itable {.smaller .smaller .smaller .smaller} 
```{python}
#| echo: false
u.itopt.style = "width:100%;margin:auto"
u.itopt.classes = "display no-wrap cell-border"
u.itopt.scrollX = "True"
u.itopt.css = """
.itables table td { font-size: 14px;}
.itables table th { font-size: 16px;}
"""
u.view(df)
```

## Slide with some code
```{.python code-line-numbers="6-8"}
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

## Slide with disparately highlighted code
```{.python code-line-numbers="7,9"}
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

## Progressive line highlighting
```{.python code-line-numbers="|6|9"}
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

## Slide with code echo
```{python}
#| echo: true

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={"projection": "polar"})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

## Slide with tab sets
::: {.panel-tabset}

### Tab A

Content for `Tab A`

### Tab B

Content for `Tab B`

:::

## Slide with a custom background {background-color="aquamarine"}

- All CSS color formats are supported, including hex values, keywords, rgba() or hsl()
- Four different types of backgrounds are supported: color, image, video and iframe.

## {background-color="aquamarine"}

(A slide with no title)

## {background-color="black" background-image="https://placekitten.com/100/100" background-size="100px" background-repeat="repeat"}

(Another slide with no title)